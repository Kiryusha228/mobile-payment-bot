package org.example.service;

import org.example.client.CrudClient;
import org.example.enums.Provider;
import org.example.enums.UserState;
import org.example.model.dto.ChangeMainPhoneDto;
import org.example.model.dto.CreatePhoneDto;
import org.example.model.dto.CreateUserDto;
import org.example.properties.TgBotProperties;
import org.example.properties.YoomoneyProperties;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.util.*;

@Service
public class TgBotService extends TelegramLongPollingBot {

    private final TgBotProperties tgBotProperties;
    private final YoomoneyProperties yoomoneyProperties;
    private final CrudClient crudClient;

    private final Map<Long, UserState> userStates = new HashMap<>();
    private final Map<Long, String> userContext = new HashMap<>();

    public TgBotService(
            TgBotProperties tgBotProperties,
            YoomoneyProperties yoomoneyProperties,
            CrudClient crudClient
    ) {
        super(tgBotProperties.getToken());
        this.tgBotProperties = tgBotProperties;
        this.yoomoneyProperties = yoomoneyProperties;
        this.crudClient = crudClient;
    }

    @Override
    public void onUpdateReceived(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                var text = update.getMessage().getText();
                var chatId = update.getMessage().getChatId();
                var username = update.getMessage().getFrom().getUserName();
                var userState = userStates.get(chatId);

                switch (text) {
                    case "/start" -> {
                        crudClient.createUser(new CreateUserDto(chatId, username));
                        sendMainMenu(chatId);
                    }
                    case "–û–ø–ª–∞—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω" -> {
                        if (userState != null) {
                            cancelAction(chatId);
                            userState = null;
                        }
                        payMainPhone(chatId);
                    }
                    case "–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤" -> {
                        if (userState != null) {
                            cancelAction(chatId);
                            userState = null;
                        }
                        sendPhoneList(chatId);
                    }
                    case "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω" -> {
                        if (userState != null) {
                            cancelAction(chatId);
                            userState = null;
                        }
                        sendProviderChoice(chatId);
                    }
                    default -> execute(SendMessage.builder()
                            .chatId(chatId.toString())
                            .text("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                            .build());
                }

                if (userState != null) {
                    switch (userState) {
                        case WAIT_SUM -> handleAmountInput(chatId, text);
                        case WAIT_PHONE_NUMBER -> handlePhoneNumberInput(chatId, text);
                    }
                }

            } else if (update.hasCallbackQuery()) {
                var callbackData = update.getCallbackQuery().getData();
                var chatId = update.getCallbackQuery().getMessage().getChatId();

                if (callbackData.startsWith("pay_")) {
                    payPhone(chatId, callbackData);
                } else if (callbackData.startsWith("provider_")) {
                    handleProviderChoice(update);
                } else if (callbackData.startsWith("main_")) {
                    handleChangeMainPhone(update);
                } else if (callbackData.startsWith("cancel_")) {
                    cancelAction(chatId);
                    editMessage(update, "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", null);
                }
            }

        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private void clearUserState(Long chatId) {
        userStates.remove(chatId);
        userContext.remove(chatId);
    }

    private void cancelAction(Long chatId) throws TelegramApiException {
        clearUserState(chatId);
        execute(SendMessage.builder()
                .chatId(chatId.toString())
                .text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
                .build());
    }

    private void editMessage(Update update, String text, InlineKeyboardMarkup markup) throws TelegramApiException {
        var msg = update.getCallbackQuery().getMessage();
        var edit = new EditMessageText();
        edit.setChatId(msg.getChatId());
        edit.setMessageId(msg.getMessageId());
        edit.setText(text);
        if (markup != null) edit.setReplyMarkup(markup);
        execute(edit);
    }

    private void sendMainMenu(Long chatId) throws TelegramApiException {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);

        var rows = new ArrayList<KeyboardRow>();
        rows.add(new KeyboardRow(List.of(new KeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω"))));
        rows.add(new KeyboardRow(List.of(new KeyboardButton("–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤"))));
        rows.add(new KeyboardRow(List.of(new KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"))));
        keyboard.setKeyboard(rows);

        var message = SendMessage.builder()
                .chatId(chatId.toString())
                .text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
                .replyMarkup(keyboard)
                .build();

        execute(message);
    }

    private void sendPhoneList(Long chatId) throws TelegramApiException {
        var phones = crudClient.getPhonesByChatId(chatId);
        if (phones.isEmpty()) {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("üì≠ –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—É—Å—Ç.")
                    .build());
            return;
        }

        var rows = new ArrayList<List<InlineKeyboardButton>>();
        for (var phone : phones) {
            rows.add(List.of(
                    InlineKeyboardButton.builder()
                            .text("üìû +7" + phone.getPhoneNumber())
                            .callbackData("pay_" + phone.getId())
                            .build(),
                    InlineKeyboardButton.builder()
                            .text(phone.getMain() ? "üü¢" : "‚ö™Ô∏è")
                            .callbackData("main_" + phone.getId())
                            .build()
            ));
        }

        var markup = InlineKeyboardMarkup.builder().keyboard(rows).build();

        execute(SendMessage.builder()
                .chatId(chatId.toString())
                .text("üì± –í–∞—à–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:")
                .replyMarkup(markup)
                .build());
    }

    private void sendProviderChoice(Long chatId) throws TelegramApiException {
        var markup = new InlineKeyboardMarkup();
        var rows = new ArrayList<List<InlineKeyboardButton>>();
        rows.add(List.of(
                InlineKeyboardButton.builder().text("üêù Beeline").callbackData("provider_beeline").build(),
                InlineKeyboardButton.builder().text("üë®üèª‚Äçü¶≥ T2").callbackData("provider_t2").build()
        ));
        markup.setKeyboard(rows);

        execute(SendMessage.builder()
                .chatId(chatId.toString())
                .text("üì° –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:")
                .replyMarkup(markup)
                .build());
    }

    private void handleProviderChoice(Update update) throws TelegramApiException {
        var chatId = update.getCallbackQuery().getMessage().getChatId();
        var operator = update.getCallbackQuery().getData().replace("provider_", "");
        userContext.put(chatId, operator);
        userStates.put(chatId, UserState.WAIT_PHONE_NUMBER);
        editMessage(update, "üì≤ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (10 —Ü–∏—Ñ—Ä –±–µ–∑ 8 –∏–ª–∏ +7):", null);
    }

    private void handlePhoneNumberInput(Long chatId, String phoneText) throws TelegramApiException {
        var cleanPhone = phoneText.replaceAll("[^0-9]", "");
        if (cleanPhone.length() != 10) {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞.\n–ü—Ä–∏–º–µ—Ä: 9261234567")
                    .build());
            return;
        }

        var provider = getEnumProvider(userContext.get(chatId));
        var userId = crudClient.getUserIdByChatId(chatId);
        Long phoneId = null;

        try {
            var phone = crudClient.createPhone(new CreatePhoneDto(userId, cleanPhone, provider));
            phoneId = phone.getId();
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!\nüì± +7" + phone.getPhoneNumber())
                    .build());
        } catch (Exception e) {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\nüìû +7" + cleanPhone)
                    .build());
        }

        try {
            crudClient.getMainPhoneByChatId(chatId);
        } catch (Exception ex) {
            crudClient.changeMainPhone(new ChangeMainPhoneDto(chatId, phoneId));
        }

        clearUserState(chatId);
        sendMainMenu(chatId);
    }

    private Provider getEnumProvider(String provider) {
        return switch (provider) {
            case "t2" -> Provider.T2;
            case "beeline" -> Provider.BEELINE;
            default -> throw new IllegalStateException("–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: " + provider);
        };
    }

    private void handleAmountInput(Long chatId, String amountText) throws TelegramApiException {
        var phoneId = userContext.get(chatId);
        var userId = crudClient.getUserIdByChatId(chatId);
        double amount;

        try {
            amount = Double.parseDouble(amountText);
        } catch (NumberFormatException e) {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
                    .build());
            return;
        }

        amount += amount * 0.031; // –∫–æ–º–∏—Å—Å–∏—è

        var markup = new InlineKeyboardMarkup();
        var link = String.format(
                yoomoneyProperties.getPaymentLink() + "%s&label=phone%s#user%s",
                amount, phoneId, userId
        );

        var payBtn = InlineKeyboardButton.builder()
                .text("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å " + String.format("%.2f ‚ÇΩ", amount))
                .url(link)
                .build();

        markup.setKeyboard(List.of(List.of(payBtn)));

        execute(SendMessage.builder()
                .chatId(chatId.toString())
                .text("üí∞ –ö–æ–º–∏—Å—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞: 3%\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã üëá")
                .replyMarkup(markup)
                .build());

        clearUserState(chatId);
    }

    private void payPhone(Long chatId, String callbackData) throws TelegramApiException {
        var phoneId = callbackData.replace("pay_", "");
        userStates.put(chatId, UserState.WAIT_SUM);
        userContext.put(chatId, phoneId);

        var phone = crudClient.getPhoneById(Long.parseLong(phoneId));
        execute(SendMessage.builder()
                .chatId(chatId.toString())
                .text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞:\nüì± +7" + phone.getPhoneNumber())
                .build());
    }

    private void handleChangeMainPhone(Update update) throws TelegramApiException {
        var chatId = update.getCallbackQuery().getMessage().getChatId();
        var messageId = update.getCallbackQuery().getMessage().getMessageId();
        var phoneId = Long.parseLong(update.getCallbackQuery().getData().replace("main_", ""));

        crudClient.changeMainPhone(new ChangeMainPhoneDto(chatId, phoneId));

        var phones = crudClient.getPhonesByChatId(chatId);
        if (phones.isEmpty()) {
            var edit = new EditMessageText();
            edit.setChatId(chatId);
            edit.setMessageId(messageId);
            edit.setText("üì≠ –°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –ø—É—Å—Ç.");
            execute(edit);
            return;
        }

        var rows = new ArrayList<List<InlineKeyboardButton>>();
        for (var phone : phones) {
            rows.add(List.of(
                    InlineKeyboardButton.builder()
                            .text("üìû +7" + phone.getPhoneNumber())
                            .callbackData("pay_" + phone.getId())
                            .build(),
                    InlineKeyboardButton.builder()
                            .text(phone.getMain() ? "üü¢" : "‚ö™Ô∏è")
                            .callbackData("main_" + phone.getId())
                            .build()
            ));
        }

        var markup = InlineKeyboardMarkup.builder().keyboard(rows).build();

        var edit = new EditMessageText();
        edit.setChatId(chatId);
        edit.setMessageId(messageId);
        edit.setText("üì± –í–∞—à–∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ã:");
        edit.setReplyMarkup(markup);
        execute(edit);
    }


    private void payMainPhone(Long chatId) throws TelegramApiException {
        try {
            var mainPhone = crudClient.getMainPhoneByChatId(chatId);
            if (mainPhone == null) {
                execute(SendMessage.builder()
                        .chatId(chatId.toString())
                        .text("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω.\n–í—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–°–ø–∏—Å–æ–∫ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤¬ª.")
                        .build());
                return;
            }
            userStates.put(chatId, UserState.WAIT_SUM);
            userContext.put(chatId, String.valueOf(mainPhone.getId()));

            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("üí≥ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\nüì± +7" + mainPhone.getPhoneNumber())
                    .build());
        } catch (Exception e) {
            execute(SendMessage.builder()
                    .chatId(chatId.toString())
                    .text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
                    .build());
        }
    }

    public void executeMessage(String text, Long chatId) throws TelegramApiException {
        execute(SendMessage.builder()
                .chatId(chatId.toString())
                .text(text)
                .build());
    }

    @Override
    public String getBotUsername() {
        return tgBotProperties.getName();
    }
}
